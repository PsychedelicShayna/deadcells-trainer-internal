#include "apflask.hpp"

byteptr_t DcInternalHacks::APFlask::LocateStartingInstruction() {
    if(previousPatternStartLocation != nullptr) {
        const std::vector<byteptr_t>& pattern_scan_matches {
            ght::internal::ScanMemoryPagesForBytePatternMatches(previousPatternStartLocation - 1024, previousPatternStartLocation + AsmPattern.PatternBytes.size() + 1024, AsmPattern, true)
        };

        if(pattern_scan_matches.size()) {
            return pattern_scan_matches[0] + 151;
        }
    }

    const std::vector<byteptr_t>& pattern_scan_matches {
        ght::internal::ScanMemoryPagesForBytePatternMatches(0x00, 0x7FFFFFFF, AsmPattern, true)
    };

    if(pattern_scan_matches.size()) {
        previousPatternStartLocation = pattern_scan_matches[0];
        return pattern_scan_matches[0] + 151;
    }

    return nullptr;
}

int32_t DcInternalHacks::APFlask::Patch() {
    byteptr_t instruction_location { LocateStartingInstruction() };

    if(instruction_location == nullptr) return 1;
    if(currentlyPatched) return 2;

    originalInstructions = ght::internal::ReplaceBytes(instruction_location, patchedInstructions);

    currentlyPatched = true;

    return 0;
}

int32_t DcInternalHacks::APFlask::Restore() {
    byteptr_t instruction_location { LocateStartingInstruction() };

    if(instruction_location == nullptr) return 1;
    if(!currentlyPatched) return 2;

    ght::internal::ReplaceBytes(instruction_location, originalInstructions);

    currentlyPatched = false;

    return 0;
}

int32_t DcInternalHacks::APFlask::Toggle() {
    return currentlyPatched ? Restore() : Patch();
}

bool DcInternalHacks::APFlask::IsPatched() const {
    return currentlyPatched;
}

DcInternalHacks::APFlask::APFlask()
    :
      previousPatternStartLocation   { nullptr },
      currentlyPatched               { false   }
{
    patchedInstructions = { 0x90 };

    AsmPattern.PatternBytes = {
        0x12, 0xfa, 0x32, 0xc9, 0xad, 0x4d, 0xbd, 0x92, 0xcb, 0x2e, 0x66, 0xbe, 0xc1, 0x86, 0x4e, 0x9f,
        0xdf, 0x3a, 0xbd, 0xbd, 0xbd, 0xb0, 0x4d, 0x52, 0xef, 0x3a, 0xbd, 0xbd, 0xbd, 0xb0, 0x4d, 0x53,
        0x2f, 0xca, 0xc1, 0xae, 0x4a, 0x2a, 0x7e, 0x12, 0x54, 0x40, 0xfa, 0x92, 0x1c, 0xad, 0x4d, 0xbd,
        0x92, 0xcb, 0x2e, 0x66, 0xbe, 0xc1, 0x86, 0x4e, 0xcb, 0xc7, 0x06, 0xbd, 0xbd, 0xbd, 0xc1, 0xae,
        0x4a, 0x2a, 0xde, 0x5e, 0x54, 0x40, 0xfa, 0xc2, 0x1c, 0xad, 0x4d, 0xbd, 0x92, 0xcb, 0x2e, 0x66,
        0xbe, 0xc1, 0x86, 0x4e, 0xc9, 0x0f, 0xca, 0xcb, 0x0a, 0x4a, 0xc9, 0x0f, 0xce, 0xcb, 0x0a, 0x4e,
        0xcb, 0x07, 0xe2, 0x71, 0x90, 0xcb, 0xd7, 0x76, 0xbd, 0xbd, 0xbd, 0xc1, 0xae, 0x4a, 0x10, 0x12,
        0xbd, 0x37, 0xae, 0xbd, 0x37, 0x4a, 0xbd, 0xf7, 0x06, 0xbd, 0xbd, 0xbd, 0xaa, 0xb3, 0xe9, 0x57,
        0x43, 0xcb, 0x2e, 0x66, 0xbe, 0xc1, 0x86, 0x5e, 0xc9, 0x07, 0x4a, 0xc9, 0xca, 0x42, 0x41, 0x42,
        0x42, 0xcb, 0xcf, 0x02, 0xbd, 0xbd, 0xbd, 0x0b, 0xcb, 0xcf, 0x02, 0xbd, 0xbd, 0xbd, 0xcb, 0xca,
        //                                        ^ This byte is the byte that is chagned to a NOP.
        0x42, 0x41, 0x42, 0x42, 0x71, 0x8b, 0xcb, 0xcf, 0x02, 0xbd, 0xbd, 0xbd, 0xcb, 0xca, 0x46, 0x41,
        0x42, 0x42, 0xc9, 0xd2, 0x42, 0x41, 0x42, 0x42, 0xcb, 0xd7, 0x02, 0xbd, 0xbd, 0xbd, 0xc1, 0xae,
        0x4a, 0x12, 0xaa, 0x19, 0x07, 0xb1, 0xbd, 0xcb, 0x2e, 0x66, 0xbe, 0xc1, 0x86, 0x4e, 0xcb, 0xc7,
        0x7a, 0xbd, 0xbd, 0xbd, 0x12, 0xbd, 0xf7, 0x02, 0xbd, 0xbd, 0xbd, 0xbd, 0x37, 0x4a, 0xaa, 0xed,
        0x8d, 0x48, 0x42, 0xcb, 0x2e, 0x66, 0xbe, 0xc1, 0x86, 0x4e, 0xc9, 0x07, 0x4a, 0xc9, 0x0a, 0x12,
        0xcb, 0x0f, 0x8a, 0xc7, 0x8b, 0x37, 0x4c, 0xc1, 0xae, 0x4e, 0xfa, 0x02, 0x78, 0xb1, 0x4d, 0xbd,
        0x92, 0xcb, 0x2e, 0x66, 0xbe, 0xc9, 0x13, 0x1e, 0xcb, 0x17, 0xda, 0xc7, 0x90, 0x37, 0x4c, 0xc1,
        0xae, 0x4e, 0xfa, 0x02, 0x78, 0xb1, 0x4d, 0xbd, 0x92, 0xcb, 0x2e, 0x66, 0xbe, 0xc9, 0x00, 0x1e,
        0xcb, 0x07, 0xd6, 0xc7, 0x82, 0x37, 0x4c, 0xc1, 0xae, 0x4e, 0xfa, 0x02, 0x78, 0xb1, 0x4d, 0xbd,
        0x92, 0xcb, 0x2e, 0x66, 0xbe, 0x71, 0x8b, 0xcb, 0xcf, 0x02, 0xbd, 0xbd, 0xbd, 0xcb, 0x0a, 0x1e,
        0xfb, 0x9d, 0x36, 0x84, 0x42, 0xcb, 0xcf, 0x02, 0xbd, 0xbd, 0xbd, 0xc9, 0x17, 0x4a, 0xc9, 0x00,
        0x12, 0xcb, 0x07, 0x8a, 0xc9, 0x08, 0x16, 0xcb, 0xcf, 0x7a, 0xbd, 0xbd, 0xbd, 0xb0, 0x4d, 0x68,
        0x93, 0xb0, 0x4d, 0x53, 0xd7, 0x3a, 0xbd, 0xbd, 0xbd, 0xb0, 0x4d, 0x52, 0x18, 0x22, 0xb0, 0x4d,
        0x53, 0xdf, 0x32, 0xbd, 0xbd, 0xbd, 0xb0, 0x4d, 0x1a, 0x91, 0xb0, 0x4d, 0x53, 0xd7, 0x3a, 0xbd,
        0xbd, 0xbd, 0xb0, 0x4d, 0x52, 0x5f, 0xb6, 0x13, 0x4d, 0x40, 0xb0, 0x4d, 0x53, 0xdf, 0x32, 0xbd,
        0xbd, 0xbd, 0xb0, 0x4d, 0x1b, 0x91, 0xb0, 0x4d, 0x53, 0xd7, 0x3a, 0xbd, 0xbd, 0xbd, 0xc9, 0x08,
        0x1a, 0xcb, 0xcf, 0x7a, 0xbd, 0xbd, 0xbd, 0xb0, 0x4d, 0x68, 0x9b, 0xb0, 0x4d, 0x53, 0xdf, 0x32,
        0xbd, 0xbd, 0xbd
    };

    AsmPattern.PatternMask = {
        0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
        0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00,

        0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
        //                                        ^ This byte is the byte that is chagned to a NOP.

        0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
        0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00,
        0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
        0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
        0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
        0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
        0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff,
        0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00,
        0x00, 0x00, 0x00
    };

    AsmPattern.PatternXor = 0x42;
}

